
import java.io.*;

/*
Найти ошибки

 Объект нестатического внутреннего класса не может существовать без объекта внешнего класса, а значит при сериализации
  объекта класса В сериализуется и связанный с ним объект класса Solution.

 При десериализации "по умолчанию" (равно как и методом defaultReadObject) выполняется конструктор без параметров первого (
 в иерархии наследования) несериализованного родительского класса. Т.е. если у класса А нет конструктора без параметров,
 то будет ошибка. Валидатор это не проверяет.

 При десериализации объекта класса В выполняется конструктор без параметров класса А, который (даже если он пустой)
 инициализирует переменные класса. В результате в переменной name будет "А" вместо "АВ2В2". С
 оответственно поле name приходиться сериализовать вручную. Валидатор это проверяет.
*/
public class Solution implements Serializable{
    public static class A {

        protected String nameA = "A";

        public A(String nameA) {
            this.nameA += nameA;
        }

        public A() {}
    }

    public class B extends A implements Serializable {

        private String nameB;

        public B(String nameA, String nameB) {
            super(nameA);
            this.nameA += nameA;
            this.nameB = nameB;
        }
        private void writeObject(ObjectOutputStream os) throws IOException {
            os.defaultWriteObject();
            os.writeObject(this.nameA);
        }

        private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException {
            os.defaultReadObject();
            this.nameA = (String) os.readObject();
        }
    }

    public static void main(String[] args) throws IOException, ClassNotFoundException {
        ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(arrayOutputStream);
B test = new Solution().new B("12","12");
        Solution solution = new Solution();
        B b = solution.new B("B2", "C33");
        System.out.println("nameA: " + b.nameA + ", nameB: " + b.nameB);

        oos.writeObject(b);

        ByteArrayInputStream arrayInputStream = new ByteArrayInputStream(arrayOutputStream.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(arrayInputStream);

        B b1 = (B)ois.readObject();
        System.out.println("nameA: " + b1.nameA + ", nameB: " + b1.nameB);
    }
}
